import { ArgumentsHost, Catch, ExceptionFilter, HttpException, HttpStatus, Logger } from '@nestjs/common';
import { Response } from 'express';
import { Prisma } from '@prisma/client';

@Catch()
export class PrismaExceptionFilter implements ExceptionFilter {
  private readonly logger = new Logger(PrismaExceptionFilter.name);

  catch(exception: any, host: ArgumentsHost) {
    const ctx = host.switchToHttp();
    const response = ctx.getResponse<Response>();
    const request = ctx.getRequest();

    // üîπ G√©rer les exceptions NestJS (404, 400, 401, etc.)
    if (exception instanceof HttpException) {
      const status = exception.getStatus();
      const errorResponse = {
        statusCode: status,
        message: exception.message,
        timestamp: new Date().toISOString(),
        path: request.url,
      };

      this.logger.error(`HTTP Exception: ${status} - ${exception.message} - ${request.url}`);
      return response.status(status).json(errorResponse);
    }

    // üîπ G√©rer les erreurs Prisma sp√©cifiques
    if (exception instanceof Prisma.PrismaClientKnownRequestError) {
      let statusCode = HttpStatus.BAD_REQUEST;
      let message = 'Erreur Prisma inconnue';
      const code = exception.code;

      switch (code) {
        case 'P2002': // Contrainte unique viol√©e (ex: email d√©j√† utilis√©)
          statusCode = HttpStatus.CONFLICT;
          const field = (exception?.meta?.target as any)[0] || 'Un champ';
          message = `Le champ ${field} doit √™tre unique. Une autre entr√©e existe d√©j√†.`;
          break;
        case 'P2025': // Aucune correspondance trouv√©e pour l'update/delete
          statusCode = HttpStatus.NOT_FOUND;
          message = 'Ressource non trouv√©e.';
          break;
        case 'P2003': // Violation de contrainte de cl√© √©trang√®re
          statusCode = HttpStatus.BAD_REQUEST;
          message = 'Violation de contrainte de cl√© √©trang√®re. Une r√©f√©rence n\'existe pas.';
          break;
        case 'P2014': // Violation de contrainte de relation
          statusCode = HttpStatus.BAD_REQUEST;
          message = 'Les relations entre les entit√©s sont invalides.';
          break;
        case 'P2015': // Enregistrement non trouv√©
          statusCode = HttpStatus.NOT_FOUND;
          message = 'L\'enregistrement demand√© n\'existe pas.';
          break;
        case 'P2016': // Erreur de requ√™te
          statusCode = HttpStatus.BAD_REQUEST;
          message = 'Erreur dans la requ√™te: format ou param√®tres invalides.';
          break;
        case 'P2017': // Relation entre les enregistrements inexistante
          statusCode = HttpStatus.BAD_REQUEST;
          message = 'La relation entre les enregistrements n\'existe pas.';
          break;
      }

      const errorResponse = {
        statusCode,
        message,
        code,
        timestamp: new Date().toISOString(),
        path: request.url,
      };

      this.logger.error(`Prisma Error: ${code} - ${message} - ${request.url}`);
      return response.status(statusCode).json(errorResponse);
    }

    // üîπ G√©rer les erreurs Prisma de validation
    if (exception instanceof Prisma.PrismaClientValidationError) {
      const statusCode = HttpStatus.BAD_REQUEST;
      const message = 'Erreur de validation des donn√©es.';

      const errorResponse = {
        statusCode,
        message,
        timestamp: new Date().toISOString(),
        path: request.url,
        details: exception.message.split('\n').filter(line => line.trim() !== ''),
      };

      this.logger.error(`Prisma Validation Error: ${message} - ${request.url}`);
      return response.status(statusCode).json(errorResponse);
    }

    // üîπ G√©rer les erreurs g√©n√©rales (500)
    this.logger.error(`Erreur inconnue: ${exception.message || exception}`, exception.stack);

    return response.status(HttpStatus.INTERNAL_SERVER_ERROR).json({
      statusCode: HttpStatus.INTERNAL_SERVER_ERROR,
      message: 'Une erreur interne est survenue. Veuillez r√©essayer plus tard.',
      timestamp: new Date().toISOString(),
      path: request.url,
    });
  }
}
